rm(fiveYD);rm(fiveYM);rm(fiveYY)
### UNIVERSES
normalTable <- navs[navs[,"Universe"] == "普通",]
hybridTable <- navs[navs[,"Universe"] == "混型",]
Sys.setlocale("LC_CTYPE", "chinese")
navs = read.table("navs.csv", sep=",", header=T, stringsAsFactors = F
)
navs$DATETIME <- as.Date(navs$DATETIME)
lastDay <- max(navs[,"DATETIME"])
### YTD DATA POINT
ytdFirst <- lastDay - as.numeric(format(lastDay, "%j")) + 1
### 3M DATA POINT
threeMD <- as.numeric(format(lastDay, "%d")) + 1
threeMM <- as.numeric(format(lastDay, "%m")) - 3
threeMY <- as.numeric(format(lastDay, "%Y"))
if (threeMM <= 0){
threeMM <- 12 + threeMM; threeMY <- threeMY - 1
}
threeMFirst <- try(as.Date(paste(threeMY, threeMM, threeMD, sep = "-")))
if (inherits(threeMFirst, "try-error")){
threeMD <- 1
threeMM <- threeMM + 1
if (threeMM == 13){threeMM <- 1; threeMY <- threeMY + 1}
threeMFirst <- try(as.Date(paste(threeMY, threeMM, threeMD, sep = "-")))
}
### 1Y DATA POINT
oneYD <- as.numeric(format(lastDay, "%d")) + 1
oneYM <- as.numeric(format(lastDay, "%m"))
oneYY <- as.numeric(format(lastDay, "%Y")) - 1
oneYFirst <- try(as.Date(paste(oneYY, oneYM, oneYD, sep = "-")))
if (inherits(oneYFirst, "try-error")){
oneYD <- 1
oneYM <- oneYM + 1
if (oneYM == 13){oneYM <- 1; oneYY <- oneYY + 1}
oneYFirst <- try(as.Date(paste(oneYY, oneYM, oneYD, sep = "-")))
}
### 3Y DATA POINT
threeYD <- as.numeric(format(lastDay, "%d")) + 1
threeYM <- as.numeric(format(lastDay, "%m"))
threeYY <- as.numeric(format(lastDay, "%Y")) - 3
threeYFirst <- try(as.Date(paste(threeYY, threeYM, threeYD, sep = "-")))
if (inherits(threeYFirst, "try-error")){
threeYD <- 1
threeYM <- threeYM + 1
if (threeYM == 13){threeYM <- 1; threeYY <- threeYY + 1}
threeYFirst <- try(as.Date(paste(threeYY, threeYM, threeYD, sep = "-")))
}
### 5Y DATA POINT
fiveYD <- as.numeric(format(lastDay, "%d")) + 1
fiveYM <- as.numeric(format(lastDay, "%m"))
fiveYY <- as.numeric(format(lastDay, "%Y")) - 5
fiveYFirst <- try(as.Date(paste(fiveYY, fiveYM, fiveYD, sep = "-")))
if (inherits(fiveYFirst, "try-error")){
fiveYD <- 1
fiveYM <- fiveYM + 1
if (fiveYM == 13){fiveYM <- 1; fiveYY <- fiveYY + 1}
fiveYFirst <- try(as.Date(paste(fiveYY, fiveYM, fiveYD, sep = "-")))
}
### CLEAN
rm(threeMD);rm(threeMM);rm(threeMY)
rm(oneYD);rm(oneYM);rm(oneYY)
rm(threeYD);rm(threeYM);rm(threeYY)
rm(fiveYD);rm(fiveYM);rm(fiveYY)
### UNIVERSES
normalTable <- navs[navs[,"Universe"] == "普通",]
hybridTable <- navs[navs[,"Universe"] == "混型",]
ytdFirst <- lastDay - as.numeric(format(lastDay, "%j")) + 1
ytdFirst <- tdaysoffset(0, lastDay)$Data[,"DATETIME"]
library(WindR); w.start()
ytdFirst <- tdaysoffset(0, lastDay)$Data[,"DATETIME"]
ytdFirst <- w.tdaysoffset(0, lastDay)$Data[,"DATETIME"]
ytdFirst <- w.tdaysoffset(0, ytdFirst)$Data[,"DATETIME"]
ytdFirst <- lastDay - as.numeric(format(lastDay, "%j")) + 1
ytdFirst <- w.tdaysoffset(0, ytdFirst)$Data[,"DATETIME"]
ytdStart <- w.tdaysoffset(0, lastDay - as.numeric(format(lastDay, "%j")) + 1)$Data[,"DATETIME"]
threeMStart <- w.tdaysoffset(3, lastDay + 1, "Period=M")$Data[,"DATETIME"]
threeMStart <- w.tdaysoffset(-3, lastDay + 1, "Period=M")$Data[,"DATETIME"]
oneYStart <- w.tdaysoffset(-1, lastDay + 1, "Period=Y")$Data[,"DATETIME"]
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
### 5Y DATA POINT
fiveYStart <- w.tdaysoffset(-5, lastDay + 1, "Period=Y")$Data[,"DATETIME"]
?sapply
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
navs = read.table("navs.csv", sep=",", header=T, stringsAsFactors = F)
Sys.setlocale("LC_CTYPE", "chinese");
navs = read.table("navs.csv", sep=",", header=T, stringsAsFactors = F)
universe = "普通"
navs <- navs[,c("FUNDCODE","Universe","DATETIME","FUND_FULLNAME","NAV_ADJ")]
Sys.setlocale("LC_CTYPE", "chinese")
library(WindR); w.start()
navs <- navs[navs[,"Universe"] == universe,]
navs$DATETIME <- as.Date(navs$DATETIME)
### END DATA POINT
lastDay <- max(navs[,"DATETIME"])
### START DATA POINTS
ytdStart <- w.tdaysoffset(0, lastDay - as.numeric(format(lastDay, "%j")) + 1)$Data[,"DATETIME"]
threeMStart <- w.tdaysoffset(-3, lastDay + 1, "Period=M")$Data[,"DATETIME"]
oneYStart <- w.tdaysoffset(-1, lastDay + 1, "Period=Y")$Data[,"DATETIME"]
threeYStart <- w.tdaysoffset(-3, lastDay + 1, "Period=Y")$Data[,"DATETIME"]
fiveYStart <- w.tdaysoffset(-5, lastDay + 1, "Period=Y")$Data[,"DATETIME"]
### SPLIT TABLES
ytdTable <- navs[navs[,"DATETIME"] == ytdStart | navs[,"DATETIME"] == lastDay,]
threeMTable <- navs[navs[,"DATETIME"] == threeMStart | navs[,"DATETIME"] == lastDay,]
oneYTable <- navs[navs[,"DATETIME"] == oneYStart | navs[,"DATETIME"] == lastDay,]
threeYTable <- navs[navs[,"DATETIME"] == threeYStart | navs[,"DATETIME"] == lastDay,]
fiveYTable <- navs[navs[,"DATETIME"] == fiveYStart | navs[,"DATETIME"] == lastDay,]
View(ytdTable)
library(tidyr)
?spread
x <- spread(ytdTable, DATETIME, NAV_ADJ)
x
calcTables <- list[ytdTable = ytdTable,
threeMTable = threeMTable,
oneYTable = oneYTable,
threeYTable = threeYTable,
fiveYTable = fiveYTable]
calcTables <- list(ytdTable = ytdTable,
threeMTable = threeMTable,
oneYTable = oneYTable,
threeYTable = threeYTable,
fiveYTable = fiveYTable)
length(calcTables)
calcTables[1]
seq_along(calcTables)
for (n in seq_along(calcTables)){
calcTables[n] <- spread(calcTables[n], DATETIME, NAV_ADJ, fill=NA)
calcTables[n] <- calcTables[n](complete.cases[calcTables[n]])
}
class(calcTables[n])
for (n in seq_along(calcTables)){
calcData <- calcTables[n]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcTables[n] <- calcData(complete.cases[calcData])
}
calcData <- calcTables[n][1]
calcTables <- list(ytdTable,
threeMTable,
oneYTable,
threeYTable,
fiveYTable)
class(calcTables[1])
class(calcTables$1)
class(calcTables[1])
class(calcTables[1][1])
class(calcTables[1][1][1])
class(calcTables(1))
calcTables[1]
calcTables[[1]
class(calcTables[[1]])
calcTables <- list(ytdTable = ytdTable,
threeMTable = threeMTable,
oneYTable = oneYTable,
threeYTable = threeYTable,
fiveYTable = fiveYTable)
for (n in seq_along(calcTables)){
calcData <- calcTables[[n]]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcTables[[n]] <- calcData(complete.cases[calcData])
}
for (n in seq_along(calcTables)){
calcData <- calcTables[[n]]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcTables[[n]] <- calcData[complete.cases[calcData],]
}
for (n in seq_along(calcTables)){
calcData <- calcTables[[n]]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcTables[[n]] <- calcData[complete.cases(calcData),]
}
calcTables <- list(ytdTable = ytdTable,
threeMTable = threeMTable,
oneYTable = oneYTable,
threeYTable = threeYTable,
fiveYTable = fiveYTable)
for (n in seq_along(calcTables)){
calcData <- calcTables[[n]]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcData <- calcData[complete.cases(calcData),]
calcData$Return <- calcData[,5]/calcData[,4] - 1
calcTables[[n]] <- calcData
}
calcTables <- list(ytdTable = ytdTable,
threeMTable = threeMTable,
oneYTable = oneYTable,
threeYTable = threeYTable,
fiveYTable = fiveYTable)
for (n in seq_along(calcTables)){
calcData <- calcTables[[n]]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcData <- calcData[complete.cases(calcData),]
calcData$Return <- calcData[,5]/calcData[,4] - 1
calcData <- calcData[order(-calcData$Return),]
calcTables[[n]] <- calcData
}
calcTables <- list(ytdTable = ytdTable,
threeMTable = threeMTable,
oneYTable = oneYTable,
threeYTable = threeYTable,
fiveYTable = fiveYTable)
for (n in seq_along(calcTables)){
calcData <- calcTables[[n]]
calcData <- spread(calcData, DATETIME, NAV_ADJ, fill=NA)
calcData <- calcData[complete.cases(calcData),]
calcData$Return <- calcData[,5]/calcData[,4] - 1
calcData <- calcData[order(-calcData$Return),]
calcData$Rank <- seq(nrow((calcData)))
calcTables[[n]] <- calcData
}
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
rankNavs(,"普通")
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
rankNavs(,"普通")
rankNavs(,"混型")
w.close()
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
endDate <- "2015-05-11"
startDate <- "2015-05-10"
endDate <- as.Date("2015-05-11")
startDate <- as.Date("2015-05-10")
scrapeDFCFTopics(startDate, endDate)
source('~/R Projects/CFWebScrape/scrapeDFCF.R')
scrapeDFCFTopics(startDate, endDate)
startDate <- as.Date("2015-05-10")
endDate <- as.Date("2015-05-11")
print(paste0("Starting scrape"))
startTime <- Sys.time()
titlepath <- "//div[@class='newText new']/h1"
textpath <- "//div[@id='ContentBody']/p"
inputloc <- "~/R Projects/CFWebScrape/inputdata/"
outputloc <- "~/R Projects/CFWebScrape/output/"
rawTfile <- paste0(outputloc, "DFCFRawTopics", format(runDate, "%Y%m%d"), ".txt")
summTfile <- paste0(outputloc, "DFCFSummTopics", format(runDate, "%Y%m%d"), ".txt")
actionDate <- as.Date(endDate)+1
linklist <- character(0)
for (n in seq(as.numeric(endDate-startDate))){
daylinks <- paste0(outputloc, "DFCFarticles/DFCF_", as.Date((startDate - 1 + n), format="%Y%m%d"),".csv")
linklist <- rbind(linklist, read.table(daylinks, header = F, stringsAsFactors = F))
}
seq_along(linklist)
print(paste0("Starting scrape"))
startTime <- Sys.time()
titlepath <- "//div[@class='newText new']/h1"
textpath <- "//div[@id='ContentBody']/p"
inputloc <- "~/R Projects/CFWebScrape/inputdata/"
outputloc <- "~/R Projects/CFWebScrape/output/"
rawTfile <- paste0(outputloc, "DFCFRawTopics", format(runDate, "%Y%m%d"), ".txt")
summTfile <- paste0(outputloc, "DFCFSummTopics", format(runDate, "%Y%m%d"), ".txt")
actionDate <- as.Date(endDate)+1
linklist <- character(0)
### GET LINKLIST
for (n in seq(as.numeric(endDate-startDate))){
daylinks <- paste0(outputloc, "DFCFarticles/DFCF_", as.Date((startDate - 1 + n), format="%Y%m%d"),".csv")
linklist <- c(linklist, read.table(daylinks, header = F, stringsAsFactors = F))
}
linklist <- character(0)
for (n in seq(as.numeric(endDate-startDate))){
daylinks <- paste0(outputloc, "DFCFarticles/DFCF_", as.Date((startDate - 1 + n), format="%Y%m%d"),".csv")
linklist <- c(linklist, read.table(daylinks, header = F, stringsAsFactors = F)[1])
}
read.table(daylinks, header = F, stringsAsFactors = F)
read.table(daylinks, header = F, stringsAsFactors = F)[[1]]
linklist <- character(0)
### GET LINKLIST
for (n in seq(as.numeric(endDate-startDate))){
daylinks <- paste0(outputloc, "DFCFarticles/DFCF_", as.Date((startDate - 1 + n), format="%Y%m%d"),".csv")
linklist <- c(linklist, read.table(daylinks, header = F, stringsAsFactors = F)[[1]])
}
source('~/R Projects/CFWebScrape/scrapeDFCF.R')
linklist <- linklist[1:10]
for (i in seq_along(linklist)){
### EXTRACT TITLE AND CONTENT WITH STOCK TAGS
doc <- try(htmlParse(linklist[i], useInternal = T))
if (!inherits(doc,"try-error")){
### GET PUBDATE & ACTIONDATE
dateStart <- str_locate(linklist[i], ",201")[1]+1
pubDate <- as.Date(substr(linklist[i], dateStart, dateStart + 7), "%Y%m%d")
### MERGE CONTENT SEGMENTS INTO ONE VECTOR
title <- try(iconv(xpathSApply(doc, titlepath, xmlValue), "utf-8","GBK")[1])
content <- try(iconv(str_trim(xpathSApply(doc, textpath, xmlValue)), "utf-8", "GBK"))
content <- try(content[!is.na(content) & !(content == "")])
content <- try(paste0(title, paste(content, sep = "", collapse = "")))
### EXTRACT TOPICS MENTIONED
if (!inherits(title, "try-error") & !inherits(content, "try-error")){
if (grepl(topicWords, content)){
for (n in seq_along(alltopics)){
wordsFound <- gregexpr(alltopics[n], content)[[1]]
topicCount <- length(wordsFound)
if (!(wordsFound[1] == -1) & (topicCount > 0)){
### RESCORE COUNTS
if (topicCount >= 3){topicCount <- 2}
else if (topicCount >= 1){topicCount <- 1}
### ADD TO DATAFRAME
topiclist[length(topiclist[,1]) + 1,] <- list(pubDate = as.character(pubDate),
actionDate = as.character(actionDate),
theURL = linklist[i],
topic = alltopics[n],
count = topicCount)
}
}}}
}
print(paste0("Article #", i, "(", linklist[i], ") scraped."))
}
library(XML)
for (i in seq_along(linklist)){
### EXTRACT TITLE AND CONTENT WITH STOCK TAGS
doc <- try(htmlParse(linklist[i], useInternal = T))
if (!inherits(doc,"try-error")){
### GET PUBDATE & ACTIONDATE
dateStart <- str_locate(linklist[i], ",201")[1]+1
pubDate <- as.Date(substr(linklist[i], dateStart, dateStart + 7), "%Y%m%d")
### MERGE CONTENT SEGMENTS INTO ONE VECTOR
title <- try(iconv(xpathSApply(doc, titlepath, xmlValue), "utf-8","GBK")[1])
content <- try(iconv(str_trim(xpathSApply(doc, textpath, xmlValue)), "utf-8", "GBK"))
content <- try(content[!is.na(content) & !(content == "")])
content <- try(paste0(title, paste(content, sep = "", collapse = "")))
### EXTRACT TOPICS MENTIONED
if (!inherits(title, "try-error") & !inherits(content, "try-error")){
if (grepl(topicWords, content)){
for (n in seq_along(alltopics)){
wordsFound <- gregexpr(alltopics[n], content)[[1]]
topicCount <- length(wordsFound)
if (!(wordsFound[1] == -1) & (topicCount > 0)){
### RESCORE COUNTS
if (topicCount >= 3){topicCount <- 2}
else if (topicCount >= 1){topicCount <- 1}
### ADD TO DATAFRAME
topiclist[length(topiclist[,1]) + 1,] <- list(pubDate = as.character(pubDate),
actionDate = as.character(actionDate),
theURL = linklist[i],
topic = alltopics[n],
count = topicCount)
}
}}}
}
print(paste0("Article #", i, "(", linklist[i], ") scraped."))
}
library(stringr)
for (i in seq_along(linklist)){
### EXTRACT TITLE AND CONTENT WITH STOCK TAGS
doc <- try(htmlParse(linklist[i], useInternal = T))
if (!inherits(doc,"try-error")){
### GET PUBDATE & ACTIONDATE
dateStart <- str_locate(linklist[i], ",201")[1]+1
pubDate <- as.Date(substr(linklist[i], dateStart, dateStart + 7), "%Y%m%d")
### MERGE CONTENT SEGMENTS INTO ONE VECTOR
title <- try(iconv(xpathSApply(doc, titlepath, xmlValue), "utf-8","GBK")[1])
content <- try(iconv(str_trim(xpathSApply(doc, textpath, xmlValue)), "utf-8", "GBK"))
content <- try(content[!is.na(content) & !(content == "")])
content <- try(paste0(title, paste(content, sep = "", collapse = "")))
### EXTRACT TOPICS MENTIONED
if (!inherits(title, "try-error") & !inherits(content, "try-error")){
if (grepl(topicWords, content)){
for (n in seq_along(alltopics)){
wordsFound <- gregexpr(alltopics[n], content)[[1]]
topicCount <- length(wordsFound)
if (!(wordsFound[1] == -1) & (topicCount > 0)){
### RESCORE COUNTS
if (topicCount >= 3){topicCount <- 2}
else if (topicCount >= 1){topicCount <- 1}
### ADD TO DATAFRAME
topiclist[length(topiclist[,1]) + 1,] <- list(pubDate = as.character(pubDate),
actionDate = as.character(actionDate),
theURL = linklist[i],
topic = alltopics[n],
count = topicCount)
}
}}}
}
print(paste0("Article #", i, "(", linklist[i], ") scraped."))
}
### PREP TOPICS
alltopics <- read.table(paste0(inputloc, "topics.txt"), stringsAsFactors = F)[,1]
topicWords <- paste(alltopics, sep = "", collapse="|")
topiclist <- data.frame(pubDate = character(),
actionDate = character(),
theURL = character(),
topic = character(),
count = numeric(), stringsAsFactors = F)
for (i in seq_along(linklist)){
### EXTRACT TITLE AND CONTENT WITH STOCK TAGS
doc <- try(htmlParse(linklist[i], useInternal = T))
if (!inherits(doc,"try-error")){
### GET PUBDATE & ACTIONDATE
dateStart <- str_locate(linklist[i], ",201")[1]+1
pubDate <- as.Date(substr(linklist[i], dateStart, dateStart + 7), "%Y%m%d")
### MERGE CONTENT SEGMENTS INTO ONE VECTOR
title <- try(iconv(xpathSApply(doc, titlepath, xmlValue), "utf-8","GBK")[1])
content <- try(iconv(str_trim(xpathSApply(doc, textpath, xmlValue)), "utf-8", "GBK"))
content <- try(content[!is.na(content) & !(content == "")])
content <- try(paste0(title, paste(content, sep = "", collapse = "")))
### EXTRACT TOPICS MENTIONED
if (!inherits(title, "try-error") & !inherits(content, "try-error")){
if (grepl(topicWords, content)){
for (n in seq_along(alltopics)){
wordsFound <- gregexpr(alltopics[n], content)[[1]]
topicCount <- length(wordsFound)
if (!(wordsFound[1] == -1) & (topicCount > 0)){
### RESCORE COUNTS
if (topicCount >= 3){topicCount <- 2}
else if (topicCount >= 1){topicCount <- 1}
### ADD TO DATAFRAME
topiclist[length(topiclist[,1]) + 1,] <- list(pubDate = as.character(pubDate),
actionDate = as.character(actionDate),
theURL = linklist[i],
topic = alltopics[n],
count = topicCount)
}
}}}
}
print(paste0("Article #", i, "(", linklist[i], ") scraped."))
}
source('~/R Projects/CFWebScrape/scrapeDFCF.R')
library(WindR)
w.start()
?windr
??windr
w.weqs("普通股票基金")
source.with.encoding('~/R Projects/FundManagers/final.R', encoding='GB18030')
library(windr)
library(Windr)
library(WindR)
library(WindR)
w.start()
w.wset("SectorConstituent", paste0("date = ", as.character(as.Date(Sys.time()))), "sector = 全部A股")
w.wset("SectorConstituent", paste0("date = 2015-05-17", "sector = 全部A股")
w.wset("SectorConstituent", "date = 2015-05-17", "sector = 全部A股")
w.wset("SectorConstituent", "date = 2015-05-5", "sector = 全部A股")
w.wset("SectorConstituent", "date = 2015-05-05", "sector = 全部A股")
w.wset("SectorConstituent", "date = 20150505", "sector = 全部A股")
w.wset("SectorConstituent", "date = 20150511", "sector = 全部A股")
eDate <- w.tdaysoffset(-1, as.Date(Sys.time(), format = "yyyymmdd"))$Data[,"DATETIME"]
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data
w.start()
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data
eDate <- w.tdaysoffset(-50, as.Date(Sys.time(), format = "yyyymmdd"))$Data[,"DATETIME"]
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data[,"wind_code"]
### LOAD LIBRARIES; OPEN WIND API; SET LOCALE
library(tidyr); library(WindR); w.start()
Sys.setlocale("LC_CTYPE", "chinese")
### GET TRANSACTION DATES
sDate <- w.tdaysoffset(-3, as.Date(Sys.time(), format = "yyyymmdd")-1, "Period=Y")$Data[,"DATETIME"]
eDate <- w.tdaysoffset(-1, as.Date(Sys.time(), format = "yyyymmdd"))$Data[,"DATETIME"]
tDays <- w.tdays(sDate,eDate)$Data[,"DATETIME"]
### CREATE EMPTY OUTPUT FRAMES
stockTable <- data.frame(STOCKCODE = character(),      DATETIME = as.Date(character()),
CLOSE = numeric(),            INDUSTRY_SWCODE = numeric(),
HIGH = numeric(),             LOW = numeric(),
VWAP = numeric(),             VOLUME = numeric(),
WEST_EPS_FY1 = numeric(),     WEST_EPS_FY2 = numeric(),
WEST_SALES_FY1 = numeric(),   WEST_SALES_FY2 = numeric())
HS300Cons <- data.frame(date = as.Date(character()),   wind_code = character(),
sec_name = character(),        i_weight= numeric())
ZZ500Cons <- data.frame(date = as.Date(character()),   wind_code = character(),
sec_name = character(),        i_weight= numeric())
### GET STOCKS
stocks <- w.wset("SectorConstituent", paste0("date = ", as.character(eDate)), "sector = 全部A股")$Data[,"wind_code"]
stocks <- w.wset("SectorConstituent", "date = 2015-05-15", "sector = 全部A股")$Data
stocks <- w.wset("SectorConstituent", "date = 2015-05-15", "sector = 普通股票型基金")$Data
w.wset("SectorConstituent", "date = 2015-05-15", "sector = 偏股混合型基金")$Data
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
putongjj <- cbind(universe = "普通", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 普通股票型基金")$Data[,c("wind_code", "sec_name")])
hungejj <- cbind(universe = "混合", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 偏股混合型基金")$Data[,c("wind_code", "sec_name")])
endDate = as.Date(Sys.time())-1
putongjj <- cbind(universe = "普通", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 普通股票型基金")$Data[,c("wind_code", "sec_name")])
hungejj <- cbind(universe = "混合", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 偏股混合型基金")$Data[,c("wind_code", "sec_name")])
putongjj <- cbind(universe = "普通", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 普通股票型基金")$Data[,c("wind_code", "sec_name")])
hunhejj <- cbind(universe = "混合", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 偏股混合型基金")$Data[,c("wind_code", "sec_name")])
fundlist <- rbind(putongjj, hunhejj)
head(fundlist)
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
seq_along(fundlist)
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
seq(nrow(fundlist))
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
funds <- c("000001.OF", "000002.OF")
a()
for (n in seq_along(funds)){
head(w.wsd(funds[n],"fund_fullname,fund_fundmanager,fund_setupdate,fund_custenddate,fund_benchindexcode","2015-04-18","2015-05-18","Fill=Previous")$Data)
}
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
a()
head(fundlist)
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
a()
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
a()
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
b <- a()
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
w.cloe()
w.close()
source.with.encoding('~/R Projects/fundNavs.R', encoding='GB18030')
endDate = as.Date(Sys.time())-1
library(WindR); library(tidyr); w.start()
Sys.setlocale("LC_CTYPE", "chinese")
putongjj <- cbind(universe = "普通", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 普通股票型基金")$Data[,c("wind_code", "sec_name")])
hunhejj <- cbind(universe = "混合", w.wset("SectorConstituent", paste0("date = ", as.character(endDate)), "sector = 偏股混合型基金")$Data[,c("wind_code", "sec_name")])
fundlist <- rbind(putongjj, hunhejj)
write.table(fundlist,"Wind_NormalHybridFundUniverse.csv", sep=",", row.names=F)
w.close()
setwd("~/GitHub/DataProducts_WebApp/DataProducts_WebApp")
runApp()
library(shiny)
runApp()
